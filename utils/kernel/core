#!/bin/bash

## Environment checking dependent on init.sh being run ...
if [[ "$DOCKTIE_INIT" = "true" ]] && [[ -e $DOCKTIE_ENV ]]; then
    . $DOCKTIE_ENV

    DOCKER_COMPOSE_BIN="docker-compose -f $DOCKTIE_DOCKER_COMPOSE_FULLPATH"
else
    echo 'ERROR: DockTie needs to be initialized.'
    exit 1 
fi

## Environment OK, proceed...
script_name=$1
shift
case $script_name in
	artisan)
	   docker_service_name='php'
	   command_within_service='php artisan'
	;;

        npm)
	   docker_service_name='node'
	   command_within_service='npm'
	;;

        mysql)
	   docker_service_name='mysql'
	   command_within_service="$docker_service_name"
	;;

        composer)
	   docker_service_name='composer'
	   command_within_service="$docker_service_name"
        ;;
        shell)
	   docker_service_name="$1"
	   command_within_service="sh"
           shift ## remove remaining CLI parameters. They aren't needed.
           echo '+----------------------------------------------+'
           echo "| Shell-ing into service '$docker_service_name'"
           echo "|    Use 'exit' to get off.                    "
           echo '+----------------------------------------------+'
        ;;

        *)
	   echo "ERROR: Invalid usage. See 'artisan' code for details."
	   echo
	   exit 1;
	;;
esac

## ------
## main()
## ------
if [[ "$script_name" = "composer" ]]; then
   $DOCKER_COMPOSE_BIN run --rm $docker_service_name $*
else
   if [[ $# -eq 0 ]] && [[ "$script_name" != "shell" ]] ; then
      echo "ERROR: parameter to '$script_name' missing."
      echo
      exit 1
   else
      DOCKER_CONTAINER="$DOCKER_COMPOSE_BIN exec $docker_service_name"
      $DOCKER_CONTAINER $command_within_service $*
   fi
fi
